{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2019-09-18T14:31:57.939Z",
    "end": "2019-09-18T14:31:57.946Z",
    "duration": 7,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4e688296-a652-43fe-91d9-8c72502d2cb0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1a9fe8a4-4a1c-45d3-819b-dee6ee8a8412",
          "title": "function before",
          "fullFile": "/Users/sasa/github/iaop/tests/index.js",
          "file": "/tests/index.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "before",
              "fullTitle": "function before before",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let bar = 'bar';\nlet cnt = 0;\nfunction foo() {\n  return ++cnt;\n}\nlet wrapFn = (0, _index.before)(foo, () => {\n  bar = 'barChged';\n});\nlet ret = wrapFn();\nassert(bar, \"barChged\");\nassert(true, ret === 1);",
              "err": {},
              "uuid": "0b446983-2984-4ea7-a86c-a9152e6c168a",
              "parentUUID": "1a9fe8a4-4a1c-45d3-819b-dee6ee8a8412",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "link",
              "fullTitle": "function before link",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "function foo(arg) {\n  return ++arg;\n}\nlet wrapFn = (0, _index.before)(foo, arg => arg + 2, true); // let wrapFn2 = before(wrapFn, (arg) =>arg + 2, true);\nlet ret = wrapFn(1);\nassert.equal(ret, 4);",
              "err": {},
              "uuid": "e4afb0c7-da48-4f0d-b185-ce531d88ca90",
              "parentUUID": "1a9fe8a4-4a1c-45d3-819b-dee6ee8a8412",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "multi",
              "fullTitle": "function before multi",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let cnt = 0;\nlet baz = \"a\";\nfunction foo() {\n  return ++cnt;\n}\nlet wrapFn = (0, _index.before)(foo, () => baz += \"b\");\nlet wrapFn2 = (0, _index.before)(wrapFn, () => baz += \"c\");\nlet ret = wrapFn2();\nassert.equal(baz, \"acb\");\nassert.equal(ret, 1);",
              "err": {},
              "uuid": "85b71ea5-bd9c-406f-bfa4-3ab009c5ffd0",
              "parentUUID": "1a9fe8a4-4a1c-45d3-819b-dee6ee8a8412",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "param",
              "fullTitle": "function before param",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "function foo(arg) {\n  return arg;\n}\nlet wrapFn = (0, _index.before)(foo, arg => arg);\nlet wrapFn2 = (0, _index.before)(wrapFn, arg => arg);\nlet ret = wrapFn2(2);\nassert.equal(ret, 2);",
              "err": {},
              "uuid": "0f5c644a-65d0-4743-9313-7c34df44fd86",
              "parentUUID": "1a9fe8a4-4a1c-45d3-819b-dee6ee8a8412",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0b446983-2984-4ea7-a86c-a9152e6c168a",
            "e4afb0c7-da48-4f0d-b185-ce531d88ca90",
            "85b71ea5-bd9c-406f-bfa4-3ab009c5ffd0",
            "0f5c644a-65d0-4743-9313-7c34df44fd86"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "62ecc908-7cb0-46ea-8bbf-5367f2f88937",
          "title": "function after",
          "fullFile": "/Users/sasa/github/iaop/tests/index.js",
          "file": "/tests/index.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "after",
              "fullTitle": "function after after",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let bar = 'bar';\nlet cnt = 0;\nfunction foo() {\n  return ++cnt;\n}\nlet wrapFn = (0, _index.after)(foo, () => {\n  bar = 'barChged';\n});\nlet ret = wrapFn();\nassert(bar, \"barChged\");\nassert(true, ret === 1);",
              "err": {},
              "uuid": "1d1d6e23-afd0-4289-92cf-07cb33e0fb6e",
              "parentUUID": "62ecc908-7cb0-46ea-8bbf-5367f2f88937",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "after multi",
              "fullTitle": "function after after multi",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let bar = 'bar';\nlet cnt = 0;\nfunction foo() {\n  return ++cnt;\n}\nfoo = (0, _index.after)(foo, () => ++cnt).after(() => ++cnt);\nlet ret = foo();\nassert(true, ret === 3);",
              "err": {},
              "uuid": "7648eaf5-5d34-41dc-8bac-92a513ccf2e3",
              "parentUUID": "62ecc908-7cb0-46ea-8bbf-5367f2f88937",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "pass",
              "fullTitle": "function after pass",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "function foo(arg) {\n  return ++arg;\n}\nlet wrapFn = (0, _index.after)(foo, arg => arg + 2, true);\nlet ret = wrapFn(1);\nassert.equal(ret, 4);",
              "err": {},
              "uuid": "ad9e2199-6dc8-495f-b8be-9b66a91e4432",
              "parentUUID": "62ecc908-7cb0-46ea-8bbf-5367f2f88937",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "chain",
              "fullTitle": "function after chain",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "function foo() {\n  console.log('this is original fn');\n}\nlet cnt = 1;\nlet wrapFn = (0, _index.before)(foo, function (arg) {\n  cnt++;\n  assert.equal(cnt, 3);\n}).before(function () {\n  cnt++;\n  assert.equal(cnt, 2);\n}).after(function () {\n  cnt++;\n  assert.equal(cnt, 4);\n});\nwrapFn();",
              "err": {},
              "uuid": "84051e69-087f-40de-ac1d-e8654c105081",
              "parentUUID": "62ecc908-7cb0-46ea-8bbf-5367f2f88937",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d1d6e23-afd0-4289-92cf-07cb33e0fb6e",
            "7648eaf5-5d34-41dc-8bac-92a513ccf2e3",
            "ad9e2199-6dc8-495f-b8be-9b66a91e4432",
            "84051e69-087f-40de-ac1d-e8654c105081"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "4.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {},
      "version": "4.0.1"
    }
  }
}